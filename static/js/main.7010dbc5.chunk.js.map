{"version":3,"sources":["RecipeSummery.jsx","App.js","serviceWorker.js","index.js"],"names":["RecipeSummary","props","useState","showMore","setShowMore","class","id","userData","strMeal","src","strMealThumb","alt","onClick","className","strCategory","strArea","href","strSource","target","strTags","strMeasure1","strIngredient1","strMeasure2","strIngredient2","strMeasure3","strIngredient3","strMeasure4","strIngredient4","strMeasure5","strIngredient5","strMeasure6","strIngredient6","strMeasure7","strIngredient7","strMeasure8","strIngredient8","strMeasure9","strIngredient9","strMeasure10","strIngredient10","strMeasure11","strIngredient11","strMeasure12","strIngredient12","strMeasure13","strIngredient13","strMeasure14","strIngredient14","strMeasure15","strIngredient15","strMeasure16","strIngredient16","strMeasure17","strIngredient17","strMeasure18","strIngredient18","strMeasure19","strIngredient19","strMeasure20","strIngredient20","strInstructions","strYoutube","App","currentRecipe","setCurrentRecipe","useEffect","a","axios","get","response","console","log","data","meals","fetchData","document","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7010dbc5.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\n\nfunction RecipeSummary(props) {\n  const [showMore, setShowMore] = useState(false)\n\n  return (\n    <div class='container' id='master-container'>\n      <div class='container' id=\"header\">\n        <h1>Undecided.ly</h1>\n        <p id='subtitle'>Now you <span>don't</span> have to make a decision!</p>\n      </div>\n      <div class='container' id='intro'>\n        <h2>{props.userData.strMeal}</h2>\n        <img src={props.userData.strMealThumb} alt='image of the completed dish' />\n        <button id='button-show' onClick={() => setShowMore(!showMore)}>{showMore ? \"Show Less\" : \"Show More\"}</button>\n        {showMore ?\n          (\n            <p className='container' id='show-more'>\n              <p><strong>Meal Category: </strong>{props.userData.strCategory}</p>\n              <p><strong>Origin: </strong>{props.userData.strArea}</p>\n              <p><strong>Recipe Source: </strong><a href={props.userData.strSource} target='_blank'>{props.userData.strSource}</a></p>\n              {/* need something to handle null tags */}\n              <p><strong>Tags: </strong>{props.userData.strTags}</p>\n            </p>)\n          : (<div></div>)}\n      </div>\n      <div class='container' id='recipe-box'>\n        <div class='container' id='ingredients'>\n          <h3>Ingredients:</h3>\n          <ul>\n            {/* I need to make an if statement that hides null measures and ingredients */}\n            <li>{props.userData.strMeasure1}  {props.userData.strIngredient1}</li>\n            <li>{props.userData.strMeasure2}  {props.userData.strIngredient2}</li>\n            <li>{props.userData.strMeasure3}  {props.userData.strIngredient3}</li>\n            <li>{props.userData.strMeasure4}  {props.userData.strIngredient4}</li>\n            <li>{props.userData.strMeasure5}  {props.userData.strIngredient5}</li>\n            <li>{props.userData.strMeasure6}  {props.userData.strIngredient6}</li>\n            <li>{props.userData.strMeasure7}  {props.userData.strIngredient7}</li>\n            <li>{props.userData.strMeasure8}  {props.userData.strIngredient8}</li>\n            <li>{props.userData.strMeasure9}  {props.userData.strIngredient9}</li>\n            <li>{props.userData.strMeasure10}  {props.userData.strIngredient10}</li>\n            <li>{props.userData.strMeasure11}  {props.userData.strIngredient11}</li>\n            <li>{props.userData.strMeasure12}  {props.userData.strIngredient12}</li>\n            <li>{props.userData.strMeasure13}  {props.userData.strIngredient13}</li>\n            <li>{props.userData.strMeasure14}  {props.userData.strIngredient14}</li>\n            <li>{props.userData.strMeasure15}  {props.userData.strIngredient15}</li>\n            <li>{props.userData.strMeasure16}  {props.userData.strIngredient16}</li>\n            <li>{props.userData.strMeasure17}  {props.userData.strIngredient17}</li>\n            <li>{props.userData.strMeasure18}  {props.userData.strIngredient18}</li>\n            <li>{props.userData.strMeasure19}  {props.userData.strIngredient19}</li>\n            <li>{props.userData.strMeasure20}  {props.userData.strIngredient20}</li>\n          </ul>\n        </div>\n        <div class='container' id='instructions'>\n          <h3>Instructions:</h3>\n          {props.userData.strInstructions}\n          <button\n            id='watch'>\n            <a href={props.userData.strYoutube} target='_blank' alt='link to YouTube video on how to make the recipe'>\n              See How</a>\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RecipeSummary","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport RecipeSummary from './RecipeSummery';\n\nfunction App() {\n  const [currentRecipe, setCurrentRecipe] = useState('')\n\n  useEffect(() => {\n    const url = 'https://www.themealdb.com/api/json/v1/1/random.php'\n    const fetchData = async () => {\n      const response = await axios.get(url)\n      console.log(response.data.meals[0]);\n      setCurrentRecipe(response.data.meals[0])\n    }\n    fetchData()\n    document.title = `Undecided.ly`\n  }, [])\n\n  if (currentRecipe === null) {\n    return <h1>Yelling at the chef...</h1>\n  }\n\n  return (\n    <div className=\"App\">\n      <RecipeSummary userData={currentRecipe} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}